using System;
using System.Diagnostics;
using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.Presenters;
using Avalonia.Input;
using Avalonia.Interactivity;
using Avalonia.Markup.Xaml;
using Avalonia.Media;
using BalatroSeedOracle.Helpers;

namespace BalatroSeedOracle.Components
{
    /// <summary>
    /// Base class for expandable widgets with minimize/expand and drag functionality
    /// Following KISS principle - simple, reusable, clean
    /// </summary>
    public partial class ExpandableWidgetBase : UserControl
    {
        // UI Elements are auto-generated by Avalonia in the partial class
        // No need to declare them here
        
        // Drag state
        private bool _isDragging;
        private Point _dragStartPoint;
        private Point _originalPosition;
        
        // Widget state
        private bool _isExpanded;
        private int _notificationCount;
        
        // Configurable properties
        public Size MinimizedSize { get; set; } = new Size(150, 80);
        public Size ExpandedSize { get; set; } = new Size(400, 500);
        public string WidgetTitle { get; set; } = "Widget";
        
        public ExpandableWidgetBase()
        {
            InitializeComponent();
        }
        
        protected virtual void InitializeComponent()
        {
            AvaloniaXamlLoader.Load(this);
            
            // Find controls
            MinimizedView = this.FindControl<Grid>("MinimizedView");
            MinimizedContainer = this.FindControl<Border>("MinimizedContainer");
            ExpandedView = this.FindControl<Border>("ExpandedView");
            NotificationBadge = this.FindControl<Border>("NotificationBadge");
            BadgeText = this.FindControl<TextBlock>("BadgeText");
            HeaderText = this.FindControl<TextBlock>("HeaderText");
            MinimizedContent = this.FindControl<ContentPresenter>("MinimizedContent");
            ExpandedContent = this.FindControl<ContentPresenter>("ExpandedContent");
            HeaderButtons = this.FindControl<ContentPresenter>("HeaderButtons");
            DragHeader = this.FindControl<Border>("DragHeader");
            
            // Set initial sizes
            UpdateSizes();
        }
        
        protected override void OnLoaded(RoutedEventArgs e)
        {
            base.OnLoaded(e);
            
            // Set header text
            if (HeaderText != null)
                HeaderText.Text = WidgetTitle;
        }
        
        /// <summary>
        /// Toggle between minimized and expanded states
        /// </summary>
        protected void OnMinimizedClick(object? sender, PointerPressedEventArgs e)
        {
            Expand();
        }
        
        /// <summary>
        /// Minimize the widget
        /// </summary>
        protected void OnMinimizeClick(object? sender, RoutedEventArgs e)
        {
            Minimize();
        }
        
        /// <summary>
        /// Expand the widget with animation
        /// </summary>
        public virtual void Expand()
        {
            if (_isExpanded) return;
            
            Debug.Assert(MinimizedView != null);
            Debug.Assert(ExpandedView != null);
            
            _isExpanded = true;
            
            // Hide minimized, show expanded
            MinimizedView.IsVisible = false;
            ExpandedView.IsVisible = true;
            
            // Trigger expanded event
            OnExpanded();
            
            DebugLogger.Log("ExpandableWidget", $"{WidgetTitle} expanded");
        }
        
        /// <summary>
        /// Minimize the widget with animation
        /// </summary>
        public virtual void Minimize()
        {
            if (!_isExpanded) return;
            
            Debug.Assert(MinimizedView != null);
            Debug.Assert(ExpandedView != null);
            
            _isExpanded = false;
            
            // Hide expanded, show minimized
            ExpandedView.IsVisible = false;
            MinimizedView.IsVisible = true;
            
            // Trigger minimized event
            OnMinimized();
            
            DebugLogger.Log("ExpandableWidget", $"{WidgetTitle} minimized");
        }
        
        /// <summary>
        /// Update notification badge
        /// </summary>
        public void SetNotificationCount(int count)
        {
            _notificationCount = count;
            
            if (NotificationBadge != null && BadgeText != null)
            {
                if (count > 0)
                {
                    BadgeText.Text = count > 99 ? "99+" : count.ToString();
                    NotificationBadge.IsVisible = true;
                }
                else
                {
                    NotificationBadge.IsVisible = false;
                }
            }
        }
        
        /// <summary>
        /// Start dragging the widget
        /// </summary>
        protected void OnDragStart(object? sender, PointerPressedEventArgs e)
        {
            if (e.GetCurrentPoint(this).Properties.IsLeftButtonPressed)
            {
                _isDragging = true;
                _dragStartPoint = e.GetPosition(this.Parent as Visual);
                
                // Store original position
                _originalPosition = new Point(
                    Canvas.GetLeft(this),
                    Canvas.GetTop(this)
                );
                
                // Capture pointer
                e.Pointer.Capture(sender as Border);
                e.Handled = true;
                
                DebugLogger.Log("ExpandableWidget", $"Started dragging {WidgetTitle}");
            }
        }
        
        /// <summary>
        /// Handle drag movement
        /// </summary>
        protected void OnDragMove(object? sender, PointerEventArgs e)
        {
            if (_isDragging && this.Parent is Canvas canvas)
            {
                var currentPosition = e.GetPosition(canvas);
                
                var offsetX = currentPosition.X - _dragStartPoint.X;
                var offsetY = currentPosition.Y - _dragStartPoint.Y;
                
                // Update position
                Canvas.SetLeft(this, _originalPosition.X + offsetX);
                Canvas.SetTop(this, _originalPosition.Y + offsetY);
                
                e.Handled = true;
            }
        }
        
        /// <summary>
        /// End dragging
        /// </summary>
        protected void OnDragEnd(object? sender, PointerReleasedEventArgs e)
        {
            if (_isDragging)
            {
                _isDragging = false;
                e.Pointer.Capture(null);
                e.Handled = true;
                
                // Save position
                OnPositionChanged();
                
                DebugLogger.Log("ExpandableWidget", $"Stopped dragging {WidgetTitle}");
            }
        }
        
        /// <summary>
        /// Update widget sizes
        /// </summary>
        protected void UpdateSizes()
        {
            if (MinimizedContainer != null)
            {
                MinimizedContainer.Width = MinimizedSize.Width;
                MinimizedContainer.Height = MinimizedSize.Height;
            }
            
            if (ExpandedView != null)
            {
                ExpandedView.Width = ExpandedSize.Width;
                ExpandedView.Height = ExpandedSize.Height;
            }
        }
        
        /// <summary>
        /// Add glow effect when active
        /// </summary>
        public void SetActive(bool active)
        {
            if (MinimizedContainer != null)
            {
                if (active)
                    MinimizedContainer.Classes.Add("active");
                else
                    MinimizedContainer.Classes.Remove("active");
            }
            
            if (ExpandedView != null)
            {
                if (active)
                    ExpandedView.Classes.Add("active");
                else
                    ExpandedView.Classes.Remove("active");
            }
        }
        
        // Virtual methods for derived classes to override
        protected virtual void OnExpanded() { }
        protected virtual void OnMinimized() { }
        protected virtual void OnPositionChanged() { }
        
        // Properties for binding
        public object? MinimizedContentValue { get; set; }
        public object? ExpandedContentValue { get; set; }
        public object? HeaderButtonsValue { get; set; }
    }
}